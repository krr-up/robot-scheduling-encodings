#!/usr/bin/env python

# ------------------------------------------------------------------------------
# Takes the output from clingo (such as generated by the runsolver) where the
# answer sets are in lines starting with "Answer:" and turn the model into a set
# of ASP facts.
# ------------------------------------------------------------------------------
import logging
import os
import math
import sys
import re
import codecs

answer_re = re.compile(r"^Answer:\s+(?P<val>[0-9]+).*$")


#from numpy import array, asarray, inf, zeros, minimum, diagonal, newaxis

# Module level logger
g_logger = logging.getLogger(__name__)

#-------------------------------------------------------------------------------
# ------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# -------------------------------------------------------------------------------


# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
SCRIPT_DIR=os.path.dirname(os.path.abspath(__file__))
#SPFILE=os.path.join(SCRIPT_DIR,"shortest_paths.lp")

def main():

    # Load the instance
    if len(sys.argv) <= 1:
        g_logger.fatal("Missing input instance")
        return
    elif len(sys.argv) == 2 and sys.argv == "-":
        g_logger.fatal("READ FROM STDIN")
        return

    answers = {}
    filename=sys.argv[1]
    with open(filename, errors='ignore', encoding='utf-8') as file:
        while True:
            line = file.readline()
            if not line: break
            m = answer_re.match(line)
            if not m: continue
            answers[int(m.group("val"))] = file.readline()

    num_answers = len(answers)
#    print("Answers found: {}".format(num_answers))
    if num_answers == 0: return
    ansid=list(answers.keys())[-1]
#    print("LAST KEY: {}".format(ansid))
#    print("Last answer: {}".format(answers[ansid]))

    tmp = answers[ansid].strip() + "."
    print(tmp.replace(") ",").\n"))
# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    main()
    sys.stderr.flush()
    sys.stdout.flush()
