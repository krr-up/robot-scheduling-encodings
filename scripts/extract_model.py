#!/usr/bin/env python

# ------------------------------------------------------------------------------
# Takes the standard output from clingo (or as generated by the runsolver) where
# the answer sets are in lines starting with "Answer:" and turn the model into a
# set of ASP facts.
# ------------------------------------------------------------------------------
import os
import math
import sys
import re
import codecs
import argparse

argparser = argparse.ArgumentParser()
argparser.add_argument("rawfile", type=str, help="Clingo generated raw file or - for stdin")
argparser.add_argument("--count", action='store_true', help='Return the number of models')
argparser.add_argument("--id", type=int, help="Id of answer to output")
argparser.add_argument("--rawonerror", action='store_true',
                       help="Print the raw output to stderr on error")
argparser.add_argument("--progress", action='store_true',
                       help="Print a progress count")

#from numpy import array, asarray, inf, zeros, minimum, diagonal, newaxis


#-------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

g_progress=False
g_rawonerror=False
g_lines = []
#-------------------------------------------------------------------------------
# -------------------------------------------------------------------------------
def extract_models(file):
    global g_progress, g_rawonerror, g_lines
    answer_re = re.compile(r"^Answer:\s+(?P<val>[0-9]+).*$")

    answers = []
    while True:
        line = file.readline()
        if not line: break
        if g_rawonerror: g_lines.append(line)
        m = answer_re.match(line)
        if not m: continue
        line = file.readline()
        if g_rawonerror: g_lines.append(line)
        answers.append(line)
        if g_progress: sys.stderr.write("Model count: {}\n".format(len(answers)))
    return answers

# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
SCRIPT_DIR=os.path.dirname(os.path.abspath(__file__))

def main():
    global g_progress, g_rawonerror, g_lines
    args = argparser.parse_args()

    if args.rawonerror: g_rawonerror = True
    if args.progress: g_progress = True
    answers=None
    if args.rawfile == "-":
        answers = extract_models(sys.stdin)
    else:
        with open(args.rawfile, errors='ignore', encoding='utf-8') as file:
            answers = extract_models(file)

    if args.count:
        print("There are {} models".format(len(answers)))
        return

    if args.id is None: answer_id=-1
    else: answer_id=args.id
    try:
        answer = answers[answer_id]
    except IndexError:
        print("\nerror: index {} is not valid for a list of {} elements\n".format(
            answer_id,len(answers)),file=sys.stderr)
        if g_rawonerror:
            for l in g_lines: sys.stderr.write(l)
        else:
            argparser.print_help(sys.stderr)
        return

    tmp = answer.strip() + "."
    print(tmp.replace(") ",").\n"))
# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    main()
    sys.stderr.flush()
    sys.stdout.flush()
