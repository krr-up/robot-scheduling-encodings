edge((7,1),(8,1),15).
edge((8,1),(9,1),15).
edge((9,1),(10,1),15).
edge((10,1),(11,1),15).
edge((11,1),(12,1),15).
edge((12,1),(13,1),15).
edge((7,1),(7,2),15).
edge((12,1),(12,2),15).
edge((13,1),(13,2),15).
edge((12,2),(13,2),15).
edge((7,2),(7,3),15).
edge((12,2),(12,3),15).
edge((13,2),(13,3),15).
edge((5,3),(6,3),15).
edge((6,3),(7,3),15).
edge((12,3),(13,3),15).
edge((5,3),(5,4),15).
edge((6,3),(6,4),15).
edge((7,3),(7,4),15).
edge((3,4),(4,4),15).
edge((4,4),(5,4),15).
edge((5,4),(6,4),15).
edge((6,4),(7,4),15).
edge((7,4),(6,4),15).
edge((6,4),(5,4),15).
edge((5,4),(4,4),15).
edge((4,4),(3,4),15).
edge((7,4),(7,3),15).
edge((6,4),(6,3),15).
edge((5,4),(5,3),15).
edge((13,3),(12,3),15).
edge((7,3),(6,3),15).
edge((6,3),(5,3),15).
edge((13,3),(13,2),15).
edge((12,3),(12,2),15).
edge((7,3),(7,2),15).
edge((13,2),(12,2),15).
edge((13,2),(13,1),15).
edge((12,2),(12,1),15).
edge((7,2),(7,1),15).
edge((13,1),(12,1),15).
edge((12,1),(11,1),15).
edge((11,1),(10,1),15).
edge((10,1),(9,1),15).
edge((9,1),(8,1),15).
edge((8,1),(7,1),15).
conflict((7,1),(7,1)).
conflict((8,1),(8,1)).
conflict((9,1),(9,1)).
conflict((10,1),(10,1)).
conflict((11,1),(11,1)).
conflict((12,1),(12,1)).
conflict((13,1),(13,1)).
conflict((7,2),(7,2)).
conflict((12,2),(12,2)).
conflict((13,2),(13,2)).
conflict((5,3),(5,3)).
conflict((6,3),(6,3)).
conflict((7,3),(7,3)).
conflict((12,3),(12,3)).
conflict((13,3),(13,3)).
conflict((3,4),(3,4)).
conflict((4,4),(4,4)).
conflict((5,4),(5,4)).
conflict((6,4),(6,4)).
conflict((7,4),(7,4)).
task((1,pickup),(7,1)).
task((2,pickup),(13,1)).
task((3,pickup),(10,1)).
task((4,pickup),(8,1)).
task((5,pickup),(9,1)).
task((6,pickup),(13,1)).
task((1,putdown),(7,4)).
task((2,putdown),(10,1)).
task((3,putdown),(4,4)).
task((4,putdown),(5,4)).
task((5,putdown),(7,1)).
task((6,putdown),(8,1)).
home(1,(11,1)).
home(2,(12,1)).
nearest((7,1),(8,1),15).
nearest((8,1),(9,1),15).
nearest((9,1),(10,1),15).
nearest((10,1),(11,1),15).
nearest((11,1),(12,1),15).
nearest((12,1),(13,1),15).
nearest((7,1),(7,2),15).
nearest((12,1),(12,2),15).
nearest((13,1),(13,2),15).
nearest((12,2),(13,2),15).
nearest((7,2),(7,3),15).
nearest((12,2),(12,3),15).
nearest((13,2),(13,3),15).
nearest((5,3),(6,3),15).
nearest((6,3),(7,3),15).
nearest((12,3),(13,3),15).
nearest((5,3),(5,4),15).
nearest((6,3),(6,4),15).
nearest((7,3),(7,4),15).
nearest((3,4),(4,4),15).
nearest((4,4),(5,4),15).
nearest((5,4),(6,4),15).
nearest((6,4),(7,4),15).
nearest((7,4),(6,4),15).
nearest((6,4),(5,4),15).
nearest((5,4),(4,4),15).
nearest((4,4),(3,4),15).
nearest((7,4),(7,3),15).
nearest((6,4),(6,3),15).
nearest((5,4),(5,3),15).
nearest((13,3),(12,3),15).
nearest((7,3),(6,3),15).
nearest((6,3),(5,3),15).
nearest((13,3),(13,2),15).
nearest((12,3),(12,2),15).
nearest((7,3),(7,2),15).
nearest((13,2),(12,2),15).
nearest((13,2),(13,1),15).
nearest((12,2),(12,1),15).
nearest((7,2),(7,1),15).
nearest((13,1),(12,1),15).
nearest((12,1),(11,1),15).
nearest((11,1),(10,1),15).
nearest((10,1),(9,1),15).
nearest((9,1),(8,1),15).
nearest((8,1),(7,1),15).
entrypoint((7,1),(7,1),0).
entrypoint((13,1),(13,1),0).
entrypoint((10,1),(10,1),0).
entrypoint((8,1),(8,1),0).
entrypoint((9,1),(9,1),0).
entrypoint((7,4),(7,4),0).
entrypoint((4,4),(4,4),0).
entrypoint((5,4),(5,4),0).
entrypoint((11,1),(11,1),0).
entrypoint((12,1),(12,1),0).
endpoint_access((7,1),(7,1)).
endpoint_access((13,1),(13,1)).
endpoint_access((10,1),(10,1)).
endpoint_access((8,1),(8,1)).
endpoint_access((9,1),(9,1)).
endpoint_access((7,4),(7,4)).
endpoint_access((4,4),(4,4)).
endpoint_access((5,4),(5,4)).
endpoint_access((11,1),(11,1)).
endpoint_access((12,1),(12,1)).
shortest_path((7,1),(13,1),90,(8,1)).
shortest_path((7,1),(10,1),45,(8,1)).
shortest_path((7,1),(8,1),15,(8,1)).
shortest_path((7,1),(9,1),30,(8,1)).
shortest_path((7,1),(7,4),45,(7,2)).
shortest_path((7,1),(4,4),90,(7,2)).
shortest_path((7,1),(5,4),75,(7,2)).
shortest_path((7,1),(11,1),60,(8,1)).
shortest_path((7,1),(12,1),75,(8,1)).
shortest_path((13,1),(7,1),90,(12,1)).
shortest_path((13,1),(10,1),45,(12,1)).
shortest_path((13,1),(8,1),75,(12,1)).
shortest_path((13,1),(9,1),60,(12,1)).
shortest_path((13,1),(7,4),135,(12,1)).
shortest_path((13,1),(4,4),180,(12,1)).
shortest_path((13,1),(5,4),165,(12,1)).
shortest_path((13,1),(11,1),30,(12,1)).
shortest_path((13,1),(12,1),15,(12,1)).
shortest_path((10,1),(7,1),45,(9,1)).
shortest_path((10,1),(13,1),45,(11,1)).
shortest_path((10,1),(8,1),30,(9,1)).
shortest_path((10,1),(9,1),15,(9,1)).
shortest_path((10,1),(7,4),90,(9,1)).
shortest_path((10,1),(4,4),135,(9,1)).
shortest_path((10,1),(5,4),120,(9,1)).
shortest_path((10,1),(11,1),15,(11,1)).
shortest_path((10,1),(12,1),30,(11,1)).
shortest_path((8,1),(7,1),15,(7,1)).
shortest_path((8,1),(13,1),75,(9,1)).
shortest_path((8,1),(10,1),30,(9,1)).
shortest_path((8,1),(9,1),15,(9,1)).
shortest_path((8,1),(7,4),60,(7,1)).
shortest_path((8,1),(4,4),105,(7,1)).
shortest_path((8,1),(5,4),90,(7,1)).
shortest_path((8,1),(11,1),45,(9,1)).
shortest_path((8,1),(12,1),60,(9,1)).
shortest_path((9,1),(7,1),30,(8,1)).
shortest_path((9,1),(13,1),60,(10,1)).
shortest_path((9,1),(10,1),15,(10,1)).
shortest_path((9,1),(8,1),15,(8,1)).
shortest_path((9,1),(7,4),75,(8,1)).
shortest_path((9,1),(4,4),120,(8,1)).
shortest_path((9,1),(5,4),105,(8,1)).
shortest_path((9,1),(11,1),30,(10,1)).
shortest_path((9,1),(12,1),45,(10,1)).
shortest_path((7,4),(7,1),45,(7,3)).
shortest_path((7,4),(13,1),135,(7,3)).
shortest_path((7,4),(10,1),90,(7,3)).
shortest_path((7,4),(8,1),60,(7,3)).
shortest_path((7,4),(9,1),75,(7,3)).
shortest_path((7,4),(4,4),45,(6,4)).
shortest_path((7,4),(5,4),30,(6,4)).
shortest_path((7,4),(11,1),105,(7,3)).
shortest_path((7,4),(12,1),120,(7,3)).
shortest_path((4,4),(7,1),90,(5,4)).
shortest_path((4,4),(13,1),180,(5,4)).
shortest_path((4,4),(10,1),135,(5,4)).
shortest_path((4,4),(8,1),105,(5,4)).
shortest_path((4,4),(9,1),120,(5,4)).
shortest_path((4,4),(7,4),45,(5,4)).
shortest_path((4,4),(5,4),15,(5,4)).
shortest_path((4,4),(11,1),150,(5,4)).
shortest_path((4,4),(12,1),165,(5,4)).
shortest_path((5,4),(7,1),75,(6,4)).
shortest_path((5,4),(7,1),75,(5,3)).
shortest_path((5,4),(13,1),165,(6,4)).
shortest_path((5,4),(13,1),165,(5,3)).
shortest_path((5,4),(10,1),120,(6,4)).
shortest_path((5,4),(10,1),120,(5,3)).
shortest_path((5,4),(8,1),90,(6,4)).
shortest_path((5,4),(8,1),90,(5,3)).
shortest_path((5,4),(9,1),105,(6,4)).
shortest_path((5,4),(9,1),105,(5,3)).
shortest_path((5,4),(7,4),30,(6,4)).
shortest_path((5,4),(4,4),15,(4,4)).
shortest_path((5,4),(11,1),135,(6,4)).
shortest_path((5,4),(11,1),135,(5,3)).
shortest_path((5,4),(12,1),150,(6,4)).
shortest_path((5,4),(12,1),150,(5,3)).
shortest_path((11,1),(7,1),60,(10,1)).
shortest_path((11,1),(13,1),30,(12,1)).
shortest_path((11,1),(10,1),15,(10,1)).
shortest_path((11,1),(8,1),45,(10,1)).
shortest_path((11,1),(9,1),30,(10,1)).
shortest_path((11,1),(7,4),105,(10,1)).
shortest_path((11,1),(4,4),150,(10,1)).
shortest_path((11,1),(5,4),135,(10,1)).
shortest_path((11,1),(12,1),15,(12,1)).
shortest_path((12,1),(7,1),75,(11,1)).
shortest_path((12,1),(13,1),15,(13,1)).
shortest_path((12,1),(10,1),30,(11,1)).
shortest_path((12,1),(8,1),60,(11,1)).
shortest_path((12,1),(9,1),45,(11,1)).
shortest_path((12,1),(7,4),120,(11,1)).
shortest_path((12,1),(4,4),165,(11,1)).
shortest_path((12,1),(5,4),150,(11,1)).
shortest_path((12,1),(11,1),15,(11,1)).
shortest_path((7,2),(7,1),15,(7,1)).
shortest_path((7,2),(13,1),105,(7,1)).
shortest_path((7,2),(10,1),60,(7,1)).
shortest_path((7,2),(8,1),30,(7,1)).
shortest_path((7,2),(9,1),45,(7,1)).
shortest_path((7,2),(7,4),30,(7,3)).
shortest_path((7,2),(4,4),75,(7,3)).
shortest_path((7,2),(5,4),60,(7,3)).
shortest_path((7,2),(11,1),75,(7,1)).
shortest_path((7,2),(12,1),90,(7,1)).
shortest_path((12,2),(7,1),90,(12,1)).
shortest_path((12,2),(13,1),30,(13,2)).
shortest_path((12,2),(13,1),30,(12,1)).
shortest_path((12,2),(10,1),45,(12,1)).
shortest_path((12,2),(8,1),75,(12,1)).
shortest_path((12,2),(9,1),60,(12,1)).
shortest_path((12,2),(7,4),135,(12,1)).
shortest_path((12,2),(4,4),180,(12,1)).
shortest_path((12,2),(5,4),165,(12,1)).
shortest_path((12,2),(11,1),30,(12,1)).
shortest_path((12,2),(12,1),15,(12,1)).
shortest_path((13,2),(7,1),105,(12,2)).
shortest_path((13,2),(7,1),105,(13,1)).
shortest_path((13,2),(13,1),15,(13,1)).
shortest_path((13,2),(10,1),60,(12,2)).
shortest_path((13,2),(10,1),60,(13,1)).
shortest_path((13,2),(8,1),90,(12,2)).
shortest_path((13,2),(8,1),90,(13,1)).
shortest_path((13,2),(9,1),75,(12,2)).
shortest_path((13,2),(9,1),75,(13,1)).
shortest_path((13,2),(7,4),150,(12,2)).
shortest_path((13,2),(7,4),150,(13,1)).
shortest_path((13,2),(4,4),195,(12,2)).
shortest_path((13,2),(4,4),195,(13,1)).
shortest_path((13,2),(5,4),180,(12,2)).
shortest_path((13,2),(5,4),180,(13,1)).
shortest_path((13,2),(11,1),45,(12,2)).
shortest_path((13,2),(11,1),45,(13,1)).
shortest_path((13,2),(12,1),30,(12,2)).
shortest_path((13,2),(12,1),30,(13,1)).
shortest_path((7,3),(7,1),30,(7,2)).
shortest_path((7,3),(13,1),120,(7,2)).
shortest_path((7,3),(10,1),75,(7,2)).
shortest_path((7,3),(8,1),45,(7,2)).
shortest_path((7,3),(9,1),60,(7,2)).
shortest_path((7,3),(7,4),15,(7,4)).
shortest_path((7,3),(4,4),60,(7,4)).
shortest_path((7,3),(4,4),60,(6,3)).
shortest_path((7,3),(5,4),45,(7,4)).
shortest_path((7,3),(5,4),45,(6,3)).
shortest_path((7,3),(11,1),90,(7,2)).
shortest_path((7,3),(12,1),105,(7,2)).
shortest_path((12,3),(7,1),105,(12,2)).
shortest_path((12,3),(13,1),45,(13,3)).
shortest_path((12,3),(13,1),45,(12,2)).
shortest_path((12,3),(10,1),60,(12,2)).
shortest_path((12,3),(8,1),90,(12,2)).
shortest_path((12,3),(9,1),75,(12,2)).
shortest_path((12,3),(7,4),150,(12,2)).
shortest_path((12,3),(4,4),195,(12,2)).
shortest_path((12,3),(5,4),180,(12,2)).
shortest_path((12,3),(11,1),45,(12,2)).
shortest_path((12,3),(12,1),30,(12,2)).
shortest_path((13,3),(7,1),120,(12,3)).
shortest_path((13,3),(7,1),120,(13,2)).
shortest_path((13,3),(13,1),30,(13,2)).
shortest_path((13,3),(10,1),75,(12,3)).
shortest_path((13,3),(10,1),75,(13,2)).
shortest_path((13,3),(8,1),105,(12,3)).
shortest_path((13,3),(8,1),105,(13,2)).
shortest_path((13,3),(9,1),90,(12,3)).
shortest_path((13,3),(9,1),90,(13,2)).
shortest_path((13,3),(7,4),165,(12,3)).
shortest_path((13,3),(7,4),165,(13,2)).
shortest_path((13,3),(4,4),210,(12,3)).
shortest_path((13,3),(4,4),210,(13,2)).
shortest_path((13,3),(5,4),195,(12,3)).
shortest_path((13,3),(5,4),195,(13,2)).
shortest_path((13,3),(11,1),60,(12,3)).
shortest_path((13,3),(11,1),60,(13,2)).
shortest_path((13,3),(12,1),45,(12,3)).
shortest_path((13,3),(12,1),45,(13,2)).
shortest_path((5,3),(7,1),60,(6,3)).
shortest_path((5,3),(13,1),150,(6,3)).
shortest_path((5,3),(10,1),105,(6,3)).
shortest_path((5,3),(8,1),75,(6,3)).
shortest_path((5,3),(9,1),90,(6,3)).
shortest_path((5,3),(7,4),45,(6,3)).
shortest_path((5,3),(7,4),45,(5,4)).
shortest_path((5,3),(4,4),30,(5,4)).
shortest_path((5,3),(5,4),15,(5,4)).
shortest_path((5,3),(11,1),120,(6,3)).
shortest_path((5,3),(12,1),135,(6,3)).
shortest_path((6,3),(7,1),45,(7,3)).
shortest_path((6,3),(13,1),135,(7,3)).
shortest_path((6,3),(10,1),90,(7,3)).
shortest_path((6,3),(8,1),60,(7,3)).
shortest_path((6,3),(9,1),75,(7,3)).
shortest_path((6,3),(7,4),30,(7,3)).
shortest_path((6,3),(7,4),30,(6,4)).
shortest_path((6,3),(4,4),45,(6,4)).
shortest_path((6,3),(4,4),45,(5,3)).
shortest_path((6,3),(5,4),30,(6,4)).
shortest_path((6,3),(5,4),30,(5,3)).
shortest_path((6,3),(11,1),105,(7,3)).
shortest_path((6,3),(12,1),120,(7,3)).
shortest_path((6,4),(7,1),60,(7,4)).
shortest_path((6,4),(7,1),60,(6,3)).
shortest_path((6,4),(13,1),150,(7,4)).
shortest_path((6,4),(13,1),150,(6,3)).
shortest_path((6,4),(10,1),105,(7,4)).
shortest_path((6,4),(10,1),105,(6,3)).
shortest_path((6,4),(8,1),75,(7,4)).
shortest_path((6,4),(8,1),75,(6,3)).
shortest_path((6,4),(9,1),90,(7,4)).
shortest_path((6,4),(9,1),90,(6,3)).
shortest_path((6,4),(7,4),15,(7,4)).
shortest_path((6,4),(4,4),30,(5,4)).
shortest_path((6,4),(5,4),15,(5,4)).
shortest_path((6,4),(11,1),120,(7,4)).
shortest_path((6,4),(11,1),120,(6,3)).
shortest_path((6,4),(12,1),135,(7,4)).
shortest_path((6,4),(12,1),135,(6,3)).
shortest_path((3,4),(7,1),105,(4,4)).
shortest_path((3,4),(13,1),195,(4,4)).
shortest_path((3,4),(10,1),150,(4,4)).
shortest_path((3,4),(8,1),120,(4,4)).
shortest_path((3,4),(9,1),135,(4,4)).
shortest_path((3,4),(7,4),60,(4,4)).
shortest_path((3,4),(4,4),15,(4,4)).
shortest_path((3,4),(5,4),30,(4,4)).
shortest_path((3,4),(11,1),165,(4,4)).
shortest_path((3,4),(12,1),180,(4,4)).
robot(1).
robot(2).
depends(deliver,(1,pickup),(1,putdown)).
depends(deliver,(2,pickup),(2,putdown)).
depends(deliver,(3,pickup),(3,putdown)).
depends(deliver,(4,pickup),(4,putdown)).
depends(deliver,(5,pickup),(5,putdown)).
depends(deliver,(6,pickup),(6,putdown)).
depends(wait,(3,pickup),(2,putdown)).
depends(wait,(1,pickup),(5,putdown)).
depends(wait,(4,pickup),(6,putdown)).
start(1,(11,1)).
start(2,(12,1)).


#const maxstep=32.
